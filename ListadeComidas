// Exercicio Lista de comidas


package Colection

data class Receita(val nome: String, val calorias: Int, val ingredientes: List<Ingredientes> = listOf())
data class Ingredientes(val nome: String, val quantidade: Int)

                                    //para pegar a farinha
fun hasIngrediente(list: List<Ingredientes>, name:String) :Boolean {
           return list.filter { it.nome == name }.any()
                                    }  // varificando se
// o filtro retornou algum item da lista de ingredientes com o nome passado por paramento


fun main() {

    // Cria lista de dados
    val data = listOf(
        Receita(
            "Lasanha", 1200,
            listOf(
                Ingredientes("Farinha", 1),
                Ingredientes("Presunto", 5),
                Ingredientes("Queijo", 10),
                Ingredientes("Molho de tomate", 2),
                Ingredientes("Manjerição", 3)
            )
        ),
        Receita("Panqueca", 500),
        Receita("Omelete", 200),
        Receita("Parmegiana", 700),
        Receita("Sopa de feijão", 300),
        Receita(
            "Hamburguer", 2000,
            listOf(
                Ingredientes("Pão", 1),
                Ingredientes("Hamburguer", 3),
                Ingredientes("Queijo", 1),
                Ingredientes("Catupiry", 1),
                Ingredientes("Bacon", 3),
                Ingredientes("Alface", 1),
                Ingredientes("Tomate", 1)
            )
        )
    )

    // Tenho receitas na lista?
    println("Tenho receitas? ${if (data.any()) "sim" else "não"}.")

    // Quantas receitas tenho na coleção?
    println("Tenho o total de Receitas:  ${data.count()}.")

    // Qual a primeira e última receita?
    println("O primeiro item é:  ${data.first().nome}." + "O último item é: ${data.last().nome}.")

    // Qual a soma de calorias?
    var somaCal = data.sumBy { it.calorias }
    println("As somas das calorias é: $somaCal")

    // Me dê as duas primeiras receitas
    val firstTwo = data.take(2)
    for (x in firstTwo.withIndex()) {
        // +1 poq começa sempre do 0, pra fica bonitu
        println("${x.index + 1} - ${x.value.nome}")
    }

    println("PARTE 2")
    // Sei como fazer panqueca? E sushi?
    val knowPancake = data.filter { it.nome == "Panqueca" }.any() // vai pegar no filtro se existe algum elemento com o nome, e se existe algum elemento
    val knowSushi = data.filter { it.nome == "Sushi" }.any()

    println(" Sei fazer Panqueca? ${if(knowPancake) "sim" else "não" }")
    println(" Sei fazer Sushi? ${if(knowSushi) "sim" else "não"}")

    // Quais são as comidas com mais de 500 calorias?
    // vai pegar as comidas com calorias >500  //  para cada elemento retornado vai aparecer no println
    val comidasCal = data.filter { it.calorias > 500}.forEach{ println(it.nome)}


    //Par (chaves, valor) de comidas com mais de 500 calorias (nome, calorias)
    // map vai pegar um tipod e coleção e jogar para outro
    //pair, poq quer uma lista de pares, pelo nome vai saber as calorias
    //forEach, exibindo o nome e as calorias com first e seconds pelas chaves
    data.filter{ it.calorias > 500}.map { Pair(it.nome, it.calorias)}.forEach{ println("${it.first} :" +
                                                                        "${it.second}} ")}

   // Quais da receitas possuei farinha de trigo
    val rf = data.filter { hasIngrediente(it.ingredientes, "Farinha")}.forEach{ println(it.nome)}


    /**
    // Qual a receita mais calórica? E a menos calórica?


    // Faça uma lista com o nome dos pratos
    data.map { it.nome }

    // Qual a média de calor de todas as receitas?
    val media = data.map { it.calorias }.average()
    println("A média de calorias é: $media.")

    // Lista de dados simples
    val listaInteiros = listOf(1, 2, 6, 67, 7, 3, 34, 56, 3, 3, 2, 5, 34, 2)
    println("Lista distinta: ${listaInteiros.distinct()}.")
    println("Máximo: ${listaInteiros.max()}.")
    println("Mínimo: ${listaInteiros.min()}.")

    // Eliminar receitas com mesmo nome
    println(data.distinctBy { it.nome })

    // Ordenar uma lista
    listaInteiros.sorted()
    listaInteiros.sortedDescending()

    // Inverter uma lista
    listaInteiros.reversed() */

}
